Replaced state.stuck with state.freeze
Replaced state.userDirection with state.wantedUserDirection
Replaced state.validDirection with state.currentDirection
ss
TO DO
see if you can remove pacman.type

How Pacman works
	Pacman draw method constantly monitors the coordinates of pacman and draws pacman with it's center located exactly on pacman's coordinates.
	Pacman does it's animation by keeping 2 helper variables: isOpening and  
  Pacman updates it's position 60 times per second, unless he either reached his destination object or he is stuck;
 
  After pacman reaches the center of the destination,
  he is actually moved in the coresponding place in the map array;

  The keyhandler changes the  boolean stuck to false in order to allow the loop of the game
  to check once more if the direction, now changed by the user also by this
  keyhandler is a good one (no wall upfront).
  The keyhandler does not modify the validDirection directly,
 instead it modifies the userDirection property. If userDirection is a good direction
 (it is checked in the game.start() method), than the validDirection is assigned the value of userDirection.
 The animation progress is directly affected by how much pacman moves. Thus, when pacman is stuck, the animation stops as well.
 reachedDestination and stuck are needed to allow verifying if the pacman's direction is good after he has been stuck.
 After pacman arrives to a new center of a tile(a new destination), he needs to update his position in the map array as well. The purpose of
	"needsSwap" is to tell whether pacman has already updated his position in the map.
 animationStage, maxAnimationStage and isOpening are needed for the animation of pacman (opening and closing mouth)
  The changeDirection() function changes pacman's velocity based on the current valid direction
 
 











next tile is food or powerup -> run collisionDetection between pacman and the next tile every 1/60 second
when the collisionDetection is true, replace the static type element with ' ', stop the collisionDetection and redraw the static canvas.

x,y,radius 
















Ghosts

The ghost has reached it's destination ? 
  NO: update ghost's position
  YES: The ghost has more than one direction available ? 1
      NO:   set new direction to the only tile available ahead
            update ghost's animation (eyes)
            set new destination
      YES:  for every possible tile(except for the one behind the ghost), calculate the distance between the tile   and the current position of pacman
            set the new destination as the tile that returns the shortest distance to pacman
            set the new direction to point to the chosen tile
            update ghost animation (eyes)  


1 - the ghost has more than one tile available: 
  run getNextTile with every direction except the opposite of the current ghost direction
  return an array with the tile and the direction in which the tile is
  if the result's length is 1, set the destination equal to the first element in the array








Keep a track of how many food tiles pacman ate. 

Release 2 ghosts the first time. 
After half the tiles have been eaten, release the remaining ghosts
When you release a ghost, set frozen to false and toggleEyeMovement

Set the speed of the ghost to be slower before an exit(implement in ghost) - the distance does not have to be in tiles, slow down the ghost   x,y distance before the exit












I have an array:  Map that has on each index an object with 2 props: Static and Dinamic. Dinamic holds a reference for every animated element

The target for ghosts is always pacman. You can init them in map, and run this same function after they respawn because the target is always going to be pacman.
The destination of the ghosts can also be initialized no matter when they respawn

Everytime something is reset, delete that and create a new instance of it at a chosen index. 

InitPacman => 
	 delete the last event listener 
	 add new event listener
	 set destination
	 the rest is like in the init state 
	
InitGhosts depends if pacman had power or not when they touched =>
	HAD POWER =>
		set destination 





the round is over -> reset all animated objects
the game is over -> replace the current game object with a newly created one 
prevent 2 ghosts from having roughtly the same speed 
make an animation that reminds the player that a ghost is about to get out the scared mode 
all tiles are gone -> replace the current game object with a newly created one 


  
TIPS 
keep score on the game object as pacman will be reset often
pause the previous game before making a new one
 









/**
 * Pacman .look() =>> return the objects around pacman as well as the directions in which they are
 * 		 .validateMove() =>> if the direction of pacman is equal to the direction of one of the objects allow move else stop the pacman
 * 		 .
 * 
 * 
 * 
 * 
 * Assign X,Y coordintes to every element in the map array
 * Pacman
 * 	make a method that detects and returns the empty spaces around pacman
 * 	allow moving only in towards those returned empty spaces
 * 	when the user makes the decision and moves the pacman towards one of the empty spaces, keep the data from that empty space
 * 	every 60 fps check if the coordinates of pacman are equal(or almost equal) to those of the chosen empty space 
 * 	
 * 
 * Element 	.x
 * 			.y
 *				.type
 * Take x and y for the CENTER of the shape
 * 
 * 
 * 
 * Look around then set possibleDestinations property on Pacman.
 * When the user tries to move the pacman, check if the movement destination is present in possibleDestinations.
 * 	If it is not, ignore the command
 * 	If it is, allow pacman to move until the destination point 
 * 
 * 
 * 				
 */


WALLS

A tile has a side that does not face wall -> stroke that side.
A tile has two sides on the same corner that do not face a wall -> stroke the two sides with an angle between them 

GAME END

0 lives left -> reassign the game variable to a new instance of the game object. Leave everything else as it acts based on the game var 
             -> begin the new game in a paused state 

1 or move lives left -> reset all animated elements 
                     -> pause the game 

TO DO

Optional 
  Add an animation to the power-ups(glowing or smth)
  Make the screen as wide as possible while playing  
  Add sounds 

Mandatory
  When the game is paused/not started, add a user interface page positioned on top of the game.(make it a little transparent)
  Add a dying animation for pacman 
  

